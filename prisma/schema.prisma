// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model WeighIn {
    id                 String   @id @default(cuid())
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
    date               DateTime @unique
    weight             Decimal
    weightProgress     Decimal
    weightTotalChange  Decimal
    weightToGoal       Decimal
    bodyFatPercentage  Decimal?
    bodyFatProgress    Decimal?
    bodyFatTotalChange Decimal?
    previousWeighInId  String?
    userid             String   @default("PHIL") //this would be replaced by auth eventually
}

model Goal {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    weight    Decimal
    userid    String   @unique @default("PHIL") //this would be replaced by auth eventually
}

model BloodPressureReading {
    id              String                @id @default(cuid())
    createdAt       DateTime              @default(now())
    updatedAt       DateTime              @updatedAt
    date            DateTime              @unique
    systolic        Int
    diastolic       Int
    pulse           Int?
    systolicChange  Int
    diastolicChange Int
    pulseChange     Int?
    category        BloodPressureCategory
}

enum BloodPressureCategory {
    LOW
    NORMAL
    ELEVATED
    HYPERTENSION_STAGE_1
    HYPERTENSION_STAGE_2
    HYPERTENSION_CRISIS
}

model Routine {
    id             String          @id @default(cuid())
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    summary        String
    details        String
    occurrenceType OccurrenceType
    daysOfWeek     DaySelector[]
    dayOfMonth     DayOfMonthType?
    startDateTime  DateTime
    endDateTime    DateTime?
}

model DaySelector {
    id               String   @id @default(cuid())
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
    label            String
    abbreviatedLabel String
    selected         Boolean
    Routine          Routine? @relation(fields: [routineId], references: [id])
    routineId        String?
}

enum OccurrenceType {
    DAY_OF_WEEK
    DAY_OF_MONTH
    SPECIFIC_DAY
}

enum EventStatus {
    NOT_COMPLETE
    SKIPPED
    COMPLETE
    OVERDUE
}

enum DayOfMonthType {
    FIRST
    MIDDLE
    LAST
}
